#!/usr/bin/env python
# vim:fileencoding=utf-8

from __future__ import print_function

import os
import sys

if sys.version_info[0] == 2:
  import urllib2
  from urllib2 import quote as URIescape
  urlopen = urllib2.urlopen
  input = raw_input
  def b(s):
    return s
  tobytes = frombytes = b
else:
  import urllib.request
  from urllib.parse import quote as URIescape
  urlopen = urllib.request.urlopen
  def b(s):
    return s.encode('ascii')
  def tobytes(s):
    return s.encode('utf-8')
  def frombytes(s):
    return s.decode('utf-8')

def expandpath(p):
  p = os.path.expanduser(p)
  p = os.path.expandvars(p)
  return p

import json
import struct

def parse_netint(b):
  return struct.unpack('!I', b)[0]

def pack_netint(i):
  return struct.pack('!I', i)

def recvbytes(sock, length):
  got = 0
  data = []
  while got < length:
    r = sock.recv(length - got)
    if not r:
      return
    got += len(r)
    data.append(r)
  return b('').join(data)

def fromjson(s):
  return json.loads(frombytes(s))

def tojson(d):
  return tobytes(json.dumps(d, ensure_ascii=False))

def write_response(sock, s):
  if isinstance(s, dict):
    s = tojson(s)
  if isinstance(s, str):
    s = tobytes(s)
  sock.sendall(pack_netint(len(s)) + s)

def read_response(sock):
  r = recvbytes(sock, 4)
  if not r:
    return

  length = parse_netint(r)
  data = recvbytes(sock, length)
  if data is None:
    raise Exception('client disappeared suddenly')
  return fromjson(data)

import readline
import socket

def split(text):
  dot = text.rfind('.')
  colon = text.rfind(':')
  if dot > colon:
    return text[:dot], '.', text[dot+1:]
  elif colon > dot:
    return text[:colon], ':', text[colon+1:]
  else:
    return text

class RemoteLuaCompleter(object):
  def __init__(self, sock):
    self.sock = sock

  def complete(self, text, state):
    if state == 0:
      line = readline.get_line_buffer()
      if line.startswith(':l '): # load some file
        try:
          p = line.split(None, 1)[1]
        except IndexError:
          p = ''
        if p == '~':
          return '/' if state == 0 else None

        p = expandpath(p)
        d, f = os.path.split(p)
        if not d:
          d = '.'
        self.matches = m = []
        stripn = len(f) - len(text)
        for x in os.listdir(d):
          if x.startswith(f):
            if (not f or f[0] != '.') and x[0] == '.':
              continue
            if os.path.isdir(os.path.join(d, x)):
              x += '/'
            m.append(x[stripn:])
      else:
        try:
          obj, sep, text = split(text)
          self.matches = self.attr_matches(obj, text, sep == ':')
        except ValueError:
          self.matches = self.global_matches(text)
    try:
      return self.matches[state]
    except IndexError:
      return None

  def global_matches(self, text):
    g = self.getNames('_G')
    return self.filterMatches(g, text)

  def attr_matches(self, obj, text, funcOnly):
    attrs = self.getNames(obj, funcOnly)
    if funcOnly:
      prefix = obj + ':'
    else:
      prefix = obj + '.'
    return self.filterMatches(attrs, text, prefix=prefix)

  def filterMatches(self, values, text, prefix=None):
    if prefix is None:
      return [x for x in values if x.startswith(text)]
    else:
      return [prefix + x for x in values if x.startswith(text)]

  def getNames(self, obj, funcOnly=False):
    write_response(self.sock, dict(cmd='dir', data=obj, funcOnly=funcOnly))
    ans = read_response(self.sock)
    return ans['result']

def setupReadline(sock):
  import os, atexit
  historyPath=os.path.expanduser('~/.mchconsole')

  def save_history():
    readline.write_history_file(historyPath)

  if os.path.exists(historyPath):
    readline.read_history_file(historyPath)
  readline.set_history_length(10000)
  atexit.register(save_history)

  readline.set_completer_delims(readline.get_completer_delims().replace(':', ''))
  readline.set_completer(RemoteLuaCompleter(sock).complete)
  readline.parse_and_bind("tab: complete")

def main(url, host=None):
  sock = socket.socket()
  sock.listen(1)
  url = url + '?port=%d' % sock.getsockname()[1]
  if host:
    url += '&host=' + URIescape(host)

  res = urlopen(url).read()
  if res != b('ok.\r\n'):
    sys.exit('Server error: %s' % res)
  s, a = sock.accept()
  setupReadline(s)

  print(">> Moochine Lua Console. Use ':h' to see available commands <<")
  while True:
    try:
      cmd = input('mch> ')
    except EOFError:
      print()
      break
    if not cmd:
      continue

    if cmd[0] == ':':
      if cmd.startswith(':l '):
        # let's load some code from file!
        try:
          p = cmd.split(None, 1)[1]
          p = expandpath(p)
          cmd = open(p).read()
        except IOError as e:
          print('Error:', str(e))
          continue
        except UnicodeDecodeError:
          # Python 3 only; Python 2.7 will pass the binary to server
          print('Error:', 'text encoding is not UTF-8')
          continue
      elif cmd.strip() == ':h':
        print(':l FILE\t\tload lua code from file',
              ':h\t\tdisplay this help', sep='\n')
        continue
      else:
        print('Error:', 'bad command')
        continue
    if cmd[0] == '=':
      cmd = 'return ' + cmd[1:]
    write_response(s, dict(cmd='code', data=cmd))
    ans = read_response(s)
    if not ans:
      pass
    elif 'result' in ans:
      print(ans['result'])
    elif 'error' in ans:
      print('Error:', ans['error'])
    else:
      print('Response:', ans)

if __name__ == '__main__':
  import argparse
  parser = argparse.ArgumentParser(description='connect to moochine remote Lua console.')
  parser.add_argument('URL', help='url to start the Lua console')
  parser.add_argument('--host', default=None, help='my own IP for Lua to connect back')
  args = parser.parse_args()

  try:
    main(args.URL, args.host)
  except KeyboardInterrupt:
    print()
